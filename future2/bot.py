import os
import logging
import asyncio
import json
from typing import Dict, Any, List, Set
from datetime import datetime, time
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile
from dotenv import load_dotenv
import pandas as pd
import numpy as np
from logger_config import setup_logger
from vector_store import VectorStore
from text_processor import TextProcessor
from llm_client import get_llm_client
from usecases.daily_news import analyze_trend
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from database import (
    get_user_subscription,
    update_user_subscription,
    toggle_subscription,
    get_subscribed_users,
    create_subscription
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = setup_logger("bot")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
vector_store = VectorStore()
text_processor = TextProcessor()
llm_client = get_llm_client()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class CSVUpload(StatesGroup):
    waiting_for_file = State()

class AnalysisStates(StatesGroup):
    waiting_for_category = State()
    waiting_for_query = State()

class DailyNewsStates(StatesGroup):
    waiting_for_date = State()
    waiting_for_category = State()

class SubscriptionStates(StatesGroup):
    waiting_for_category = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()

async def initialize_scheduler():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        if not scheduler.running:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            scheduler.start(paused=False)
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
            logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º—ã: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
            jobs = scheduler.get_jobs()
            logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {len(jobs)}")
            for job in jobs:
                logger.info(f"–ó–∞–¥–∞—á–∞ {job.id}: —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ - {job.next_run_time if hasattr(job, 'next_run_time') else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {str(e)}")
        raise

def clean_source_data(source: Dict[str, Any]) -> Dict[str, Any]:
    """–û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    cleaned = source.copy()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º NaN –≤ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    for key in cleaned:
        if pd.isna(cleaned[key]):
            cleaned[key] = ''
        elif isinstance(cleaned[key], (float, np.float64)):
            cleaned[key] = str(cleaned[key])
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π
    if not cleaned.get('content') and cleaned.get('description'):
        cleaned['content'] = cleaned['description']
    
    return cleaned

def print_source_info(source: Dict[str, Any], index: int):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ"""
    logger.info(f"\n{'='*50}")
    logger.info(f"–ò—Å—Ç–æ—á–Ω–∏–∫ #{index + 1}:")
    logger.info(f"URL: {source.get('url', 'N/A')}")
    logger.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {source.get('title', 'N/A')}")
    logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ: {source.get('description', 'N/A')}")
    logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {source.get('category', 'N/A')}")
    logger.info(f"–î–∞—Ç–∞: {source.get('date', 'N/A')}")
    logger.info(f"–¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source.get('source_type', 'N/A')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    content = source.get('content', '')
    logger.info(f"–î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content) if content else 0} —Å–∏–º–≤–æ–ª–æ–≤")
    if content:
        logger.info(f"–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content[:200]}")
    logger.info(f"{'='*50}\n")

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/analyze - –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑\n"
        "/upload - –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª\n"
        "/daily_news - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É\n"
        "/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"
    )

@dp.message(Command("analyze"))
async def cmd_analyze(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = vector_store.get_categories()
    
    if not categories:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=category)] for category in categories],
        resize_keyboard=True
    )
    
    await message.answer(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=keyboard
    )
    await state.set_state(AnalysisStates.waiting_for_category)

@dp.message(AnalysisStates.waiting_for_category)
async def process_category(message: types.Message, state: FSMContext):
    category = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await state.update_data(category=category)
    
    await message.answer(
        "‚ùì –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AnalysisStates.waiting_for_query)

@dp.message(AnalysisStates.waiting_for_query)
async def process_query(message: types.Message, state: FSMContext):
    query = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    category = data.get("category")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    status_message = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...")
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        from usecases.analysis import analyze_trend
        result = analyze_trend(
            category=category,
            user_query=query,
            embedding_type="openai",
            openai_model="text-embedding-3-small"
        )
        
        if result['status'] == 'error':
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {result['message']}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        response_parts = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        response_parts.append("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n")
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç
        response_parts.append("üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        response_parts.append(f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        response_parts.append(f"‚Ä¢ –¢–µ–º–∞—Ç–∏–∫–∞: {result['theme']}")
        response_parts.append(f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {result['materials_count']}")
        response_parts.append("")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        if result.get("analysis"):
            response_parts.append("üìà –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
            response_parts.append("="*50)
            response_parts.append(result['analysis'].strip())
            response_parts.append("="*50)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–∞—Å—Ç—è–º–∏
        response_text = "\n".join(response_parts)
        response_chunks = [response_text[i:i+4000] for i in range(0, len(response_text), 4000)]
        
        for chunk in response_chunks:
            await message.answer(chunk)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_message.delete()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
        await status_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
    
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

@dp.message(Command("upload"))
async def cmd_upload(message: types.Message, state: FSMContext):
    await message.answer(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
        "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:\n"
        "- url: —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫\n"
        "- title: –∑–∞–≥–æ–ª–æ–≤–æ–∫\n"
        "- description: –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "- content: —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n"
        "- date: –¥–∞—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì)\n"
        "- category: –∫–∞—Ç–µ–≥–æ—Ä–∏—è\n"
        "- source_type: —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞"
    )
    await state.set_state(CSVUpload.waiting_for_file)

@dp.message(CSVUpload.waiting_for_file)
async def process_csv(message: types.Message, state: FSMContext):
    if not message.document:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª")
        return
    
    if not message.document.file_name.endswith('.csv'):
        await message.answer("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV")
        return
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file = await bot.get_file(message.document.file_id)
    file_path = file.file_path
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_file = f"temp_{message.document.file_id}.csv"
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await bot.download_file(file_path, temp_file)
        
        # –ß–∏—Ç–∞–µ–º CSV
        df = pd.read_csv(temp_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = ['url', 'title', 'description', 'content', 'date', 'category', 'source_type']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            await message.answer(f"‚ùå –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        processed_data = []
        
        for _, row in df.iterrows():
            source = {
                'url': row['url'],
                'title': row['title'],
                'description': row['description'],
                'content': row['content'],
                'date': row['date'],
                'category': row['category'],
                'source_type': row['source_type']
            }
            processed_source = clean_source_data(source)
            processed_data.append(processed_source)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        vector_store.add_materials(processed_data)
        
        await message.answer(
            f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n"
            f"‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(processed_data)}\n"
            f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(df['category'].unique())}"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV: {str(e)}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(temp_file):
            os.remove(temp_file)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

@dp.message(Command("subscribe"))
async def cmd_subscribe(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = vector_store.get_categories()
    
    if not categories:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=category)] for category in categories],
        resize_keyboard=True
    )
    
    await message.answer(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=keyboard
    )
    await state.set_state(SubscriptionStates.waiting_for_category)

@dp.message(SubscriptionStates.waiting_for_category)
async def process_subscription_category(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    category = message.text
    user_id = str(message.chat.id)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if update_user_subscription(user_id, category):
            await message.answer(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}",
                reply_markup=types.ReplyKeyboardRemove()
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            job_id = f"daily_digest_{message.chat.id}"
            try:
                # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if scheduler.get_job(job_id):
                    scheduler.remove_job(job_id)
                    logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–¥–∞—á–∞ {job_id}")
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                job = scheduler.add_job(
                    send_daily_digest,
                    CronTrigger(hour=13, minute=45),
                    args=[message.chat.id],
                    id=job_id,
                    replace_existing=True
                )
                
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {message.chat.id}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {str(e)}")
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏",
                reply_markup=types.ReplyKeyboardRemove()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏",
            reply_markup=types.ReplyKeyboardRemove()
        )
    
    finally:
        await state.clear()

@dp.message(Command("daily_news"))
async def cmd_daily_news(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É"""
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-03-20"
    )
    await state.set_state(DailyNewsStates.waiting_for_date)

@dp.message(DailyNewsStates.waiting_for_date)
async def process_daily_news_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã"""
    date_text = message.text.strip()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        datetime.strptime(date_text, "%Y-%m-%d")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
        await state.update_data(analysis_date=date_text)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = vector_store.get_categories()
        
        if not categories:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text=category)] for category in categories],
            resize_keyboard=True
        )
        
        await message.answer(
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=keyboard
        )
        await state.set_state(DailyNewsStates.waiting_for_category)
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-03-20"
        )

@dp.message(DailyNewsStates.waiting_for_category)
async def process_daily_news_category(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    category = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –¥–∞—Ç—É
    data = await state.get_data()
    analysis_date = data.get("analysis_date")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    status_message = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...")
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        result = analyze_trend(
            category=category,
            analysis_date=analysis_date
        )
        
        if result['status'] == 'error':
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {result['message']}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_parts = [
            f"üìä –°–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {analysis_date}\n",
            f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n",
            "="*50 + "\n"
        ]
        
        if result.get("analysis"):
            message_parts.append(result['analysis'].strip())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = "\n".join(message_parts)
        message_chunks = [message_text[i:i+4000] for i in range(0, len(message_text), 4000)]
        
        for chunk in message_chunks:
            await message.answer(chunk)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_message.delete()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
        await status_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
    
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await state.clear()
        await message.answer(
            "–ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /daily_news –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å–≤–æ–¥–∫–∏.",
            reply_markup=types.ReplyKeyboardRemove()
        )

async def set_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="analyze", description="–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑"),
        types.BotCommand(command="upload", description="–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª"),
        types.BotCommand(command="subscribe", description="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"),
        types.BotCommand(command="daily_news", description="–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É")
    ]
    await bot.set_my_commands(commands)

async def send_welcome_message(chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.\n\n"
        "üìä –ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00 –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–≤–æ–¥–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–Ω–¥—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö\n\n"
        "üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/analyze - –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤\n"
        "/upload - –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏\n\n"
        "üìà –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n"
        "‚Ä¢ –í–∏–¥–µ–æ–∏–≥—Ä—ã\n\n"
        "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"
    )
    await bot.send_message(chat_id=chat_id, text=welcome_text)

async def send_daily_digest(chat_id: int):
    try:
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        logger.info(f"–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} –≤ {current_time}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = str(chat_id)
        subscription = get_user_subscription(user_id)
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {subscription}")
        
        if not subscription.get('enabled', False):
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –¥–∞–π–¥–∂–µ—Å—Ç")
            return
        
        category = subscription.get('category')
        if not category:
            logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        current_date = datetime.now().strftime("%Y-%m-%d")
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–∞—Ç—É: {current_date}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_parts = [f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ {current_date}:\n"]
        
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
            result = analyze_trend(
                category=category,
                analysis_date=current_date
            )
            
            if result['status'] == 'error':
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {result['message']}")
                return
            
            message_parts.append(f"\nüìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            message_parts.append("="*30)
            if result.get("analysis"):
                message_parts.append(result['analysis'].strip())
            message_parts.append("="*30)
            
            logger.info("–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {str(e)}")
            return
        
        if len(message_parts) > 1:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏
            message_text = "\n".join(message_parts)
            message_chunks = [message_text[i:i+4000] for i in range(0, len(message_text), 4000)]
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {len(message_chunks)} —á–∞—Å—Ç–µ–π")
            for i, chunk in enumerate(message_chunks, 1):
                await bot.send_message(chat_id, chunk)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–∞—Å—Ç—å {i} –∏–∑ {len(message_chunks)}")
        else:
            logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            await bot.send_message(chat_id, "üìä –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}")
        try:
            await bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

@dp.message(F.new_chat_members)
async def on_bot_added(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω
    bot_user = await bot.get_me()
    if any(member.id == bot_user.id for member in message.new_chat_members):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_welcome_message(message.chat.id)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = str(message.chat.id)
        try:
            create_subscription(user_id)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        await initialize_scheduler()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω
        if not scheduler.running:
            logger.error("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
            return
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await set_commands()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
